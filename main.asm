
	// CONSTANTS	
	.EQU DEFAULT_TEMP_VALUE = 30	; THIS IS THE DEFAULT THRESHOLD TEMPERATURE VALUE. IT CAN ONLY BE CHANGES BY PROGRAMMER. THIS VALUE WILL LOAD UP UPON
									; EVERY START-UP OF CHIP
																		
	.EQU MIN_TEMP_VALUE = 10		; MINIMUM VALUE THAT CAN BE MEASURED BY SENSOR
	.EQU MAX_TEMP_VALUE = 99		; MAX. VALUE THAT CAN BE MEASURED BY SENSOR


	// MEMORY ADDRESSES OF VARIABLES
	.EQU THRESHOLD_TEMPERATURE = 700  ;THIS IS THE MEMORY LOCATION WHERE WE'LL STORE BASELINE TEMPERATURE VALUE
	.EQU SENSOR_DATA = 701			; TEMPERATURE SENSOR DATA IS STORED AT RAM LOCATION 701
	.EQU MOTOR_CONTROL_FLAG = 702	; FLAG FOR CONTROLLING MOTOR CONTROL. IF THIS FLAG IS SET THEN THE MOTOR CONTROL FUNCTION(S) WILL BE INVOKED
	.EQU CURRENT_TEMPERATURE = 703	; THIS IS THE MEMORY ADDRESS WHERE WE'LL STORE CURRENT VALUE OF TEMPERATURE MEASURED BY SENSOR 


	// LCD DISPLAY RELATED PARAMETERS 
	.EQU LCD_DPRT = PORTB				;LCD DATA PORT
	.EQU LCD_DDDR = DDRB				;LCD DATA DDR
	.EQU LCD_CPRT = PORTC				;LCD COMMANDS PORT
	.EQU LCD_CDDR = DDRC				;LCD COMMANDS DDR
	.EQU LCD_RS = 2						;LCD RS
	.EQU LCD_RW = 3						;LCD RW
	.EQU LCD_EN = 4						;LCD EN


	.DEF OUTER_DELAY_COUNTER = R17


// INTERRUPT VECTOR TABLE
// ======================

.ORG 0x0000
	JMP START
// EXTERNAL INTERRUPT 0
.ORG 0x0002	
	JMP EXT_INT_0_ISR
// EXTERNAL INTERRUPT 1
.ORG 0x0004	
	JMP EXT_INT_1_ISR
// ADC CONVERSION COMPLETE INTERRUPT
.ORG 0x0020
	JMP ADC_0_ISR


START:
	// INITIALIZE STACK
	LDI R16, HIGH(RAMEND)
	OUT SPH, R16
	LDI R16, LOW(RAMEND)
	OUT SPL, R16

INIT:
	CALL INPUT_CONTROL_CONFIG_FUNC				; CONFIGURE INPUT PINS
	CALL LCD_CONFIG_FUNC						; CONFIGURE LCD MODULE
	CALL SET_DEFAULT_TEMP						; SPECIFY THE DEFAULT THRESHOLD TEMPERATURE WHEN AVR POWER UPS
	CALL ENABLE_EXT_INT_0_1						; IT ENABLES EXTERNAL INTERRUPT 0 AND 1
	CALL ENABLE_ADC_0_INT						; ENABLES ADC0 CONVERSION COMPLETE INTERRUPT
	
	CALL DISPLAY_THRESHOLD_TEMPERATURE			; THIS FUNCTION DISPLAYS CURRENT THRESHOLD TEMPERATURE
	
	LDI OUTER_DELAY_COUNTER, 50
	CALL CONFIGURABLE_DELAY


	SEI		; GLOBAL INTERRUPT ENABLE

HERE:
	CALL DATA_PROCESSING_FUNC 
	CALL DISPLAY_CURRENT_TEMPERATURE

	LDI OUTER_DELAY_COUNTER, 15
	CALL CONFIGURABLE_DELAY

	JMP HERE




/* 
	FUNCTIONS
	=========

*/

/*----------------------------------------------------------------------------------*/
DATA_PROCESSING_FUNC:
	PUSH R16
	PUSH R17
	PUSH R18

	LDS R16, SENSOR_DATA
	LDS R17, THRESHOLD_TEMPERATURE
	STS CURRENT_TEMPERATURE, R16

	CP R17, R16
	BREQ EQUAL
	
	CP R17, R16
	BRCS GREATER
	JMP LESSER

EQUAL:	 
	LDI R16, 0xFF
	STS MOTOR_CONTROL_FLAG, R16
	JMP END_PROC_FUNC

GREATER:
	LDI R16, 0xFF
	STS MOTOR_CONTROL_FLAG, R16
	JMP END_PROC_FUNC


LESSER:
	LDI R16, 0x00
	STS MOTOR_CONTROL_FLAG, R16
	JMP END_PROC_FUNC

END_PROC_FUNC:
	POP R18
	POP R17
	POP R16
	RET


/*----------------------------------------------------------------------------------*/


/* 
	CONFIG. FUNCTIONS
	=================
*/
	
/*----------------------------------------------------------------------------------*/
ENABLE_ADC_0_INT:
	// MAKE PORTA.0 AN INPUT FOR ADC0
	CBI DDRA, PA0
	// 2.56V AS REFERENCE VOLTAGE, ADC0 SINGLE ENDED, LEFT JUSTIFIED
	LDI R16, (1<<REFS0) | (1<<REFS1) | (1<<ADLAR)
	OUT ADMUX, R16

	// ENABLE ADC
	// ENABLE INTERRUPT
	// SELECT ADC CLOCK AS CLK/128 
	LDI R16, (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)
	OUT ADCSRA, R16

	; START CONVERSION
	SBI ADCSRA, ADSC
	RET


/*----------------------------------------------------------------------------------*/
INPUT_CONTROL_CONFIG_FUNC:
	// INCREMENT SWITCH IS CONNECTED TO PC0
	// DECREMENT SWITCH IS CONNECTED TO PC1
	CBI DDRC, 0
	CBI DDRC, 1	
	RET


/*----------------------------------------------------------------------------------*/
LCD_CONFIG_FUNC:
	LDI R21, 0xFF
	OUT LCD_DDDR, R21 ;LCD data port is output

	LDI R16, (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN)
	OUT LCD_CDDR, R16 ;LCD command port is output
	CBI LCD_CPRT,LCD_EN;LCD_EN = 0
	CALL SDELAY ;wait for init.


	LDI R16,0x38		;init LCD 2 lines, 5×7 matrix
	CALL CMNDWRT		;call command function
	CALL DELAY_2MS		;initialization hold
	LDI R16,0x0C		;display on, cursor on
	CALL CMNDWRT		;call command function

	RET


/*----------------------------------------------------------------------------------*/
ENABLE_EXT_INT_0_1:
	// ENABLE INT0
	LDI R16, (1<<INT0) | (1<<INT1)
	OUT GICR, R16

	// TRIGGER INTERRUPT ON ANY LOGICAL CHANGE, FALLING OR RISING EDGE
	LDI R16, (1<<ISC00) | (1<<ISC10)
	OUT MCUCR, R16
	RET


/*----------------------------------------------------------------------------------*/
SET_DEFAULT_TEMP:
	LDI R16, DEFAULT_TEMP_VALUE
	STS THRESHOLD_TEMPERATURE, R16
	RET

/*----------------------------------------------------------------------------------*/

/* 
	DISPLAY FUNCTIONS
	=================
*/


/*----------------------------------------------------------------------------------*/
DISPLAY_CURRENT_TEMPERATURE:
	PUSH R16
	PUSH R17
	PUSH R18
	LDI R31,HIGH(CURRENT_TEMP_MSG<<1)
	LDI R30,LOW(CURRENT_TEMP_MSG<<1)		;Z points to MSG
	CALL WRITE_LINE
	
	CALL GET_CURRENT_TEMP_FROM_LOOKUP
	POP R18
	POP R17
	POP R16
	RET	


/*----------------------------------------------------------------------------------*/
GET_CURRENT_TEMP_FROM_LOOKUP:
	PUSH R16
	PUSH R17
	PUSH R18
	LDI R31,HIGH(TEMP<<1)
	LDI R30,LOW(TEMP<<1)	;Z points to TEMP

	// SUBTRACT MIN. TEMP FROM CURRENT THRESHOLD TEMPERATURE
	LDS R17, CURRENT_TEMPERATURE
	SUBI R17, MIN_TEMP_VALUE

	// DOUBLE THE OBTAINED DIFFERENCE FROM PREVIOUS INTRUCTIONS
	// WE WILL USE THIS DOUBLED VALUE AS THE OFFSET FOR TABLE LOOK-UP
	ADD R17, R17
	// RUN COUNTER FOR THE VALUE SPECIFIED BY R17 TO REACH THE REQUIRED LOCATION IN LOOK-UP TABLE
	// KEEP ON INCREMENTING Z POINTER ON EVERY ITERATION
C_LABEL:
	LPM R16, Z+
	DEC R17
	BRNE C_LABEL

	// WHEN Z POINTER HAS REACHED THE REQUIRED LOCATION IN LOOK-UP TABLE
	// THEN RUN ANOTHER LOOP FOR 3 TIMES TO READ AND DISPLAY THE ASCII VALUE OF TEMPRATURE FROM
	// LOOP-UP TABLE
	LDI R17, 3
A_LABEL_2:
	LPM R16, Z+
	DEC R17
	BREQ A_END_FUNC
	CALL DATAWRT
	CALL LONG_DELAY
	RJMP A_LABEL_2
A_END_FUNC:
	POP R18
	POP R17
	POP R16
	RET



/*----------------------------------------------------------------------------------*/
DISPLAY_THRESHOLD_TEMPERATURE:
	PUSH R16
	PUSH R17
	PUSH R18
	LDI R31,HIGH(MSG<<1)
	LDI R30,LOW(MSG<<1)		;Z points to MSG
	CALL WRITE_LINE
	CALL GET_LOOKUP_DATA

	LDI OUTER_DELAY_COUNTER, 40
	CALL CONFIGURABLE_DELAY

	POP R18
	POP R17
	POP R16
	RET	


/*----------------------------------------------------------------------------------*/
GET_LOOKUP_DATA:
	PUSH R16
	PUSH R17
	PUSH R18

	LDI R31,HIGH(TEMP<<1)
	LDI R30,LOW(TEMP<<1)	;Z points to TEMP

	// SUBTRACT MIN. TEMPERATURE VALUE FROM CURRENT THRESHOLD TEMPERATURE
	LDS R17, THRESHOLD_TEMPERATURE
	SUBI R17, MIN_TEMP_VALUE

	// DOUBLE THE OBTAINED DIFFERENCE FROM PREVIOUS INTRUCTIONS
	// WE WILL USE THIS DOUBLED VALUE AS THE OFFSET FOR TABLE LOOK-UP
	ADD R17, R17
	// RUN COUNTER FOR THE VALUE SPECIFIED BY R17 TO REACH THE REQUIRED LOCATION IN LOOK-UP TABLE
	// KEEP ON INCREMENTING Z POINTER ON EVERY ITERATION
COUNT:
	LPM R16, Z+
	DEC R17
	BRNE COUNT

	// WHEN Z POINTER HAS REACHED THE REQUIRED LOCATION IN LOOK-UP TABLE
	// THEN RUN ANOTHER LOOP FOR 3 TIMES TO READ AND DISPLAY THE ASCII VALUE OF TEMPRATURE FROM
	// LOOP-UP TABLE
	LDI R17, 3
LABEL_2:
	LPM R16, Z+
	DEC R17
	BREQ END_FUNC
	CALL DATAWRT
	CALL LONG_DELAY
	RJMP LABEL_2
END_FUNC:
	POP R18
	POP R17
	POP R16
	RET


/*----------------------------------------------------------------------------------*/
DISPLAY_LIMIT_ERROR:
	PUSH R16
	PUSH R17
	PUSH R18

	LDI R31,HIGH(DEC_INC_MSG<<1)
	LDI R30,LOW(DEC_INC_MSG<<1)		;Z points to limit error message
	CALL WRITE_LINE
	
	POP R18
	POP R17
	POP R16
	RET	



/*----------------------------------------------------------------------------------*/
WRITE_LINE:
	PUSH R16
	PUSH R17
	PUSH R18
	LDI R16,0x01 ;clear LCD
	CALL CMNDWRT 
	LDI R16,0x06 ;shift cursor right
	CALL CMNDWRT 
	LDI R16,0x84 ;cursor at line 1 pos. 4
	CALL CMNDWRT 
LA1:	
	LPM R16, Z+
	CPI R16, 0
	BREQ END
	CALL DATAWRT
	RJMP LA1
END:
	POP R18
	POP R17
	POP R16
	RET



/*----------------------------------------------------------------------------------*/
CMNDWRT:
	PUSH R16
	PUSH R17
	PUSH R18

	OUT LCD_DPRT,R16 ;LCD data port = R16
	CBI LCD_CPRT,LCD_RS ;RS = 0 for command
	CBI LCD_CPRT,LCD_RW ;RW = 0 for write
	SBI LCD_CPRT,LCD_EN ;EN = 1
	CALL SDELAY ;make a wide EN pulse
	CBI LCD_CPRT,LCD_EN ;EN=0 for H-to-L pulse
	CALL DELAY_100us ;wait 100 us
	
	POP R18
	POP R17
	POP R16
	RET



/*----------------------------------------------------------------------------------*/
DATAWRT:
	PUSH R16
	PUSH R17
	PUSH R18

	OUT LCD_DPRT,R16 ;LCD data port = R16
	SBI LCD_CPRT,LCD_RS ;RS = 1 for data
	CBI LCD_CPRT,LCD_RW ;RW = 0 for write
	SBI LCD_CPRT,LCD_EN ;EN = 1
	CALL SDELAY ;make a wide EN pulse
	CBI LCD_CPRT,LCD_EN ;EN=0 for H-to-L pulse
	CALL DELAY_100us ;wait 100 us
	
	POP R18
	POP R17
	POP R16
	RET


/*----------------------------------------------------------------------------------*/

/* 
	DELAY FUNCTIONS
	===============
*/

/*----------------------------------------------------------------------------------*/
SDELAY: 
	NOP
	NOP
	RET


/*----------------------------------------------------------------------------------*/
DELAY_100us:
	PUSH R16
	PUSH R17
	PUSH R18

	LDI R17,60
	DR0: 
	CALL SDELAY
	DEC R17
	BRNE DR0
	
	POP R18
	POP R17
	POP R16

	RET



/*----------------------------------------------------------------------------------*/
DELAY_2ms:
	PUSH R16
	PUSH R17
	PUSH R18

	LDI R17,20
	LDR0: 
	CALL DELAY_100US
	DEC R17
	BRNE LDR0
	
	POP R18
	POP R17
	POP R16

	RET



/*----------------------------------------------------------------------------------*/
LONG_DELAY:
	PUSH R16
	PUSH R17
	PUSH R18

	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	CALL DELAY_2MS
	
	POP R18
	POP R17
	POP R16
	
	RET



/*----------------------------------------------------------------------------------*/
CONFIGURABLE_DELAY:
	PUSH R16
	PUSH R17
	PUSH R18

C_LOOP:
	LDI R18, 255
D_LOOP:
	DEC R18
	CALL LONG_DELAY
	BRNE D_LOOP

	DEC R17
	BRNE C_LOOP

	POP R18
	POP R17
	POP R16

	RET

/*----------------------------------------------------------------------------------*/


/* 
	INTERRUPT SERVICE ROUTINES
	==========================
*/


/*----------------------------------------------------------------------------------*/
EXT_INT_0_ISR:
	PUSH R16
	PUSH R17
	PUSH R18

	CALL DELAY_2MS

	// READ PCO PIN
	IN R22, PINC
	
	// IF PC0 IS CLEARED THEN GOTO END OF ISR
	// ELSE DECREMENT THRESHOLD TEMPERATURE VALUE
	SBRS R22, 0
	JMP END_EXT_0

	// LOAD VALUE FROM MEMORY, DECREMENT IT AND STORE BACK TO IT'S MEMORY LOCATION
	// BUT DON'T DECREMENT THE VALUE THAN THE MIN VALUE SPECIFIED ABOVE
	LDS R22, THRESHOLD_TEMPERATURE
	CPI R22, MIN_TEMP_VALUE
	// IF R22 IS EQUAL TO MIN_TEMP_VALUE THEN DISPLAY ERROR MESSAGE AND END THIS INTERRUPT ROUTINE
	BREQ DISP_ERROR


	LDS R22, THRESHOLD_TEMPERATURE
	DEC R22
	STS THRESHOLD_TEMPERATURE, R22

	// MOMENTARILY DISPLAY UPDATED VALUE ON LCD AND THEN EXIT THIS ISR
	CALL DISPLAY_THRESHOLD_TEMPERATURE
	JMP END_EXT_0

DISP_ERROR:
	CALL DISPLAY_LIMIT_ERROR

END_EXT_0:
	POP R18
	POP R17
	POP R16
	
	RETI


/*----------------------------------------------------------------------------------*/
EXT_INT_1_ISR:
	PUSH R16
	PUSH R17
	PUSH R18
	
	CALL DELAY_2MS

	// READ PCO PIN
	IN R23, PINC
	
	// IF PC0 IS CLEARED THEN GOTO END OF ISR
	// ELSE INCREMENT THRESHOLD TEMPERATURE VALUE
	SBRS R23, 1
	JMP END_EXT_1

	// LOAD VALUE FROM MEMORY, INCREMENT IT AND STORE BACK TO IT'S MEMORY LOCATION
	// BUT DON'T INCREMENT THE VALUE IS GREATER THAN THE MAX TEMP. SPECIFIED ABOVE
	LDS R23, THRESHOLD_TEMPERATURE
	CPI R23, MAX_TEMP_VALUE
	// IF R23 IS EQUAL TO MAX_TEMP_VALUE THEN DISPLAY ERROR MESSAGE AND END THIS INTERRUPT ROUTINE
	BREQ DISP_ERROR_1


	LDS R23, THRESHOLD_TEMPERATURE
	INC R23
	STS THRESHOLD_TEMPERATURE, R23

	// MOMENTARILY DISPLAY UPDATED VALUE ON LCD AND THEN EXIT THIS ISR
	CALL DISPLAY_THRESHOLD_TEMPERATURE
	JMP END_EXT_1

DISP_ERROR_1:
	CALL DISPLAY_LIMIT_ERROR

END_EXT_1:
	POP R18
	POP R17
	POP R16

	RETI



/*----------------------------------------------------------------------------------*/
ADC_0_ISR:
	
	PUSH R16
	PUSH R17
	PUSH R18

	; SEND DATA TO MEMORY LOCATION
	IN R21, ADCH
	STS SENSOR_DATA, R21

	// START CONVERSION AGAIN
	SBI ADCSRA, ADSC
	
	POP R18
	POP R17
	POP R16
	RETI

/*----------------------------------------------------------------------------------*/


/* 
	LOOK-UP TABLE
	=============			
*/


.ORG 800
MSG: .DB " Threshold= ",0
DEC_INC_MSG: .DB " Limit Reached",0
CURRENT_TEMP_MSG: .DB " Temperature= ",0
TEMP: .DB "101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899",0


/*----------------------------------------------------------------------------------*/